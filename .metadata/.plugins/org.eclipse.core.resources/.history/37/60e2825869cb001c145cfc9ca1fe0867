package com.qart.StockMarket.services;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.qart.StockMarket.dto.CompanyDetailsDTO;
import com.qart.StockMarket.dto.CompanyStockDetailsDTO;
import com.qart.StockMarket.dto.StockPriceDetailsDTO;
import com.qart.StockMarket.dto.StockPriceIndexDTO;
import com.qart.StockMarket.exception.CompanyNotFoundException;
import com.qart.StockMarket.exception.InvalidDateException;
import com.qart.StockMarket.exception.StockNotFoundException;
import com.qart.StockMarket.model.CompanyDetails;
import com.qart.StockMarket.model.StockPriceDetails;
import com.qart.StockMarket.repository.CompanyDetailsRepository;
import com.qart.StockMarket.repository.StockPriceRepository;

@Service
public class StockMarketServiceImpl implements StockMarketService{
	
	@Autowired
    private StockPriceRepository stockPriceRepository;
	
	@Autowired
    private CompanyDetailsRepository companyRepository;

	@Override
	public StockPriceDetailsDTO saveStockPriceDetails(StockPriceDetailsDTO stockPriceDetailsDTO) {
		Long companyCode=stockPriceDetailsDTO.getCompanyCode();
		LocalDate stockPriceDate = stockPriceDetailsDTO.getStockPriceDate();
		int dateCheck = stockPriceDate.compareTo(java.time.LocalDate.now());
		Optional<CompanyDetails>  companyDetails =companyRepository.findById(companyCode);
		if(companyDetails.isPresent()) {
			StockPriceDetails StockPriceDetails = new StockPriceDetails();
			BeanUtils.copyProperties(stockPriceDetailsDTO,StockPriceDetails);
			if(dateCheck < 0) {
				stockPriceRepository.save(StockPriceDetails);
				return stockPriceDetailsDTO;
			}else {
				throw new InvalidDateException("Stock Price Date must be current or past date");
			}		
		}else {
			throw new CompanyNotFoundException("Company with Code " + companyCode + " not found");
		}
	}

	@Override
	public List<StockPriceDetailsDTO> getStockByCode(Long companyCode) {
		//Optional<CompanyDetails>  companyDetails =companyRepository.findById(companyCode);
		Optional<StockPriceDetails>  StockDetails =stockPriceRepository.findById(companyCode);
		if(StockDetails.isPresent()) {
			Optional<CompanyDetails>  companyDetails =companyRepository.findById(companyCode);
			StockPriceDetailsDTO stockPriceDetailsDTO = new StockPriceDetailsDTO();
			CompanyDetailsDTO companyDetailsDTO = new CompanyDetailsDTO();
			BeanUtils.copyProperties(companyDetails,companyDetailsDTO);
			BeanUtils.copyProperties(StockDetails,stockPriceDetailsDTO);
			//stockPriceDetailsDTO.setCompanyDto(companyDetailsDTO);
			List<StockPriceDetailsDTO> priceDetails = new ArrayList<>();
			priceDetails.add(stockPriceDetailsDTO);
//			details.add(companyDetailsDTO.toString());
//			details.add(stockPriceDetailsDTO.toString());
			return priceDetails;
		}
		else {
			throw new StockNotFoundException("Stock with Company Code " + companyCode + " not found");
		}
	}

	@Override
	public StockPriceIndexDTO getStockPriceIndex(Long companyCode, LocalDate startDate, LocalDate endDate) {
		Optional<StockPriceDetails>  StockDetails =stockPriceRepository.findById(companyCode);
		if(StockDetails.isPresent()) {
			
	        //List<StockPriceDetails> stockPriceDetailList=stockPriceRepository.findStockByCompanyCodeBetweendates(companyCode,startDate,endDate);
	        StockPriceIndexDTO stockPriceIndexDto=new StockPriceIndexDTO();
	        stockPriceIndexDto.setAvgStockPrice(getAvgStockPrice(companyCode,startDate,endDate));
            stockPriceIndexDto.setMaxStockPrice(getMaxStockPrice(companyCode,startDate,endDate));
            stockPriceIndexDto.setMinStockPrice(getMinStockPrice(companyCode,startDate,endDate));
//	        Double maxStockPrice=getMaxStockPrice(companyCode,startDate,endDate);
//	        Double avgStockPrice=getAvgStockPrice(companyCode,startDate,endDate);
//	        Double minStockPrice=getMinStockPrice(companyCode,startDate,endDate);
	        
	        return stockPriceIndexDto;
			
		}
		else {
			throw new StockNotFoundException("Stock with Company Code " + companyCode + " not found from "+ startDate +" to "+ endDate +" time frame");
		}
	}
	
	public Double getMaxStockPrice(Long companyCode, LocalDate startDate, LocalDate endDate) {
		return stockPriceRepository.findMaxStockPrice(companyCode, startDate, endDate);
	};
	
	public Double getAvgStockPrice(Long companyCode, LocalDate startDate, LocalDate endDate) {
			return stockPriceRepository.findAvgStockPrice(companyCode, startDate, endDate);
	};
	
	public Double getMinStockPrice(Long companyCode, LocalDate startDate, LocalDate endDate) {
		 return stockPriceRepository.findMinStockPrice(companyCode, startDate, endDate);
	}

	@Override
	public List<CompanyStockDetailsDTO> getAllStocksByCompanyCode(Long companyCode) {
		List<StockPriceDetails> stocks = stockPriceRepository.findByCompanyCode(companyCode);
		List<CompanyStockDetailsDTO> stockDtos = new ArrayList<>();
		for (StockPriceDetails stock : stocks) {
			StockPriceDetailsDTO stockDto = new StockPriceDetailsDTO();
			BeanUtils.copyProperties(stock, stockDto);
			stockDtos.add(stockDto);
		}
		Optional<CompanyDetails>  companyDetails =companyRepository.findById(companyCode);
		StockPriceDetailsDTO stockPriceDetailsDTO = new StockPriceDetailsDTO();
		CompanyDetailsDTO companyDetailsDTO = new CompanyDetailsDTO();
		BeanUtils.copyProperties(companyDetails,companyDetailsDTO);
		List<CompanyStockDetailsDTO> CompanyStockDto = new ArrayList<>();
		CompanyStockDto.add(stockDtos);
		
		
		//return StockDtos;
		return CompanyStockDto;
	};

}
